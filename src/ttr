#!/bin/sh

# 
# ##working-dir
# 
# ##file example.rb
# 
# ##file example.txt <<end
# ...
# ##end
# 
# ##java --jar example.jar example.java
# 
# ##java --jar example.jar <<end
# ...
# ##end
# 
# ##scala --jar example.jar example.scala
# 
# ##scala --jar example.jar <<end
# 
# ##end
# 

perl $WORKING_DIR/ttr.pl "$@"

##file ttr.pl <<END_OF_TTR_PL
use strict;
use warnings;
use utf8;

use File::Temp qw/tempfile tempdir/;
use File::Basename qw/dirname basename/;
use Digest::MD5 qw/md5_hex/;

use Data::Dumper;

my $separator = "################################################################################";

my $HOME = $ENV{'HOME'};

my $include_path = ".";
my $cross_flag = undef;

my $needs_working_dir = undef;
my $needs_working_dir_hard = undef;

my $working_dir;

sub process_main_body {
    my ($lines) = @_;
    my ($main_body, $attached_files, $dirty) = process_macro_lines($lines);
    if ($dirty) {
        my $final_body = assemble_files($main_body, $attached_files);
        $final_body;
    } else {
        $lines;
    }
}

sub assemble_files {
    my ($main_body, $attached_files) = @_;
    my @result_lines = ();
    foreach my $file (@$attached_files) {
        push(@result_lines, $separator);
        push(@result_lines, @{create_heredoc_sh($file)});
        push(@result_lines, "");
    }
    push(@result_lines, $separator);
    push(@result_lines, @$main_body);
    if (@$attached_files || $needs_working_dir || $needs_working_dir_hard) {
        @result_lines = @{wrap_working_dir(\@result_lines,
                                           ($needs_working_dir || (scalar @$attached_files)),
                                           $needs_working_dir_hard,
                                           $cross_flag)};
    }
    \@result_lines;
}

sub create_heredoc_sh {
    my ($attached_file) = @_;
    my @result_lines = ();
    my $filename = $attached_file->{'name'};
    push(@result_lines, "# $filename");
    my $dirname = dirname($filename);
    if ($dirname ne '.') {
        push(@result_lines, "mkdir -p \$WORKING_DIR/$dirname");
    }
    my $hash;
    my $output_fname;
    if ($attached_file->{'body'}) {
        my $lines = $attached_file->{'body'};
        $hash = get_lines_hash($lines);
        $output_fname = "file-$hash";
    } elsif ($attached_file->{'binary_path'}) {
        my $path = $attached_file->{'binary_path'};
        $hash = get_file_hash($path);
        $output_fname = "file-$hash";
    } elsif ($attached_file->{'output_fname'}) {
        $output_fname = $attached_file->{'output_fname'};
        my $path = "$HOME/.ttr/$output_fname";
        $hash = get_file_hash($path);
    } else {
        die "DEBUG $filename";
    }
    push(@result_lines, "mkdir -p \$HOME/.ttr");
    push(@result_lines, "if [ -e \$HOME/.ttr/$output_fname ]; then");
    push(@result_lines, "    touch \$HOME/.ttr/$output_fname");
    push(@result_lines, "else");
    if ($attached_file->{'body'}) {
        my $lines = $attached_file->{'body'};
        push(@result_lines, "cat <<\\EOF_$hash > \$HOME/.ttr/$output_fname");
        push(@result_lines, @$lines);
        push(@result_lines, "EOF_$hash");
    } elsif ($attached_file->{'binary_path'}) {
        my $path = $attached_file->{'binary_path'};
        push(@result_lines, "base64 -d <<EOF_$hash > \$HOME/.ttr/$output_fname");
        open(FP, "-|", "cat $path | base64");
        my @lines = (<FP>);
        close(FP);
        push(@result_lines, @{remove_end_of_line(\@lines)});
        push(@result_lines, "EOF_$hash");
    } elsif ($attached_file->{'output_fname'}) {
        my $path = "$HOME/.ttr/$output_fname";
        push(@result_lines, "base64 -d <<EOF_$hash > \$HOME/.ttr/$output_fname");
        open(FP, "-|", "cat $path | base64");
        my @lines = (<FP>);
        close(FP);
        push(@result_lines, @{remove_end_of_line(\@lines)});
        push(@result_lines, "EOF_$hash");
    } else {
        die "DEBUG $filename";
    }
    push(@result_lines, "fi");
    push(@result_lines, "ln -f -s \$HOME/.ttr/$output_fname \$WORKING_DIR/$filename");
    \@result_lines;
}

sub get_lines_hash {
    my ($lines) = @_;
    my $body = join("\n", @$lines) . "\n";
    my $hash = md5_hex($body);
    $hash;
}

sub get_file_hash {
    my ($path) = @_;
    substr(`cat $path | md5sum`, 0, 32);
}

sub wrap_working_dir {
    my ($lines, $needs_working_dir, $needs_working_dir_hard, $cross_flag) = @_;
    my @first_lines = ();
    my @last_lines = ();
    if ($needs_working_dir) {
        if ($cross_flag) {
            push(@first_lines, "if [ -z \"\$WORKING_DIR\" ]; then");
            push(@first_lines, "    if [ -z \"\$UID\" ]; then");
            push(@first_lines, "        UID=\`id -u\`");
            push(@first_lines, "    fi");
            push(@first_lines, "    if [ -d /run/user/\$UID ]; then");
            push(@first_lines, "        export WORKING_DIR=\`mktemp -d -p /run/user/\$UID\`");
            push(@first_lines, "    elif [ -d /dev/shm ]; then");
            push(@first_lines, "        export WORKING_DIR=\`mktemp -d -p /dev/shm\`");
            push(@first_lines, "    else");
            push(@first_lines, "        export WORKING_DIR=\`mktemp -d\`");
            push(@first_lines, "    fi");
            push(@first_lines, "    RM_WORKING_DIR=1");
            push(@first_lines, "fi");
        } else {
            my $uid = `id -u`;
            $uid =~ s/\A(.*?)\s*\z/$1/;
            push(@first_lines, "if [ -z \"\$WORKING_DIR\" ]; then");
            if (-d "/run/user/$uid") {
                push(@first_lines, "    export WORKING_DIR=\`mktemp -d -p /run/user/$uid\`");
            } elsif (-d "/dev/shm") {
                push(@first_lines, "    export WORKING_DIR=\`mktemp -d -p /dev/shm\`");
            } else {
                push(@first_lines, "    export WORKING_DIR=\`mktemp -d\`");
            }
            push(@first_lines, "    RM_WORKING_DIR=1");
            push(@first_lines, "fi");
        }
    }
    if ($needs_working_dir_hard) {
        push(@first_lines, "if [ -z \"\$HARD_WORKING_DIR\" ]; then");
        push(@first_lines, "    export HARD_WORKING_DIR=\`mktemp -d\`");
        push(@first_lines, "    RM_HARD_WORKING_DIR=1");
        push(@first_lines, "fi");
    }
    push(@first_lines, 'trap ":" 2 3 15');
    push(@first_lines, "(");
    push(@last_lines, $separator);
    push(@last_lines, ")");
    push(@last_lines, "RET=\$?");
    if ($needs_working_dir_hard) {
        push(@last_lines, "if [ -n \"\$RM_HARD_WORKING_DIR\" ]; then");
        push(@last_lines, "    rm -rf \$HARD_WORKING_DIR 2>/dev/null");
        push(@last_lines, "fi");
    }
    if ($needs_working_dir) {
        push(@last_lines, "if [ -n \"\$RM_WORKING_DIR\" ]; then");
        push(@last_lines, "    rm -rf \$WORKING_DIR 2>/dev/null");
        push(@last_lines, "fi");
    }
    push(@last_lines, "exit \$RET");
    [@first_lines, "", @$lines, "", @last_lines];
}

sub process_macro_lines {
    my ($lines) = @_;
    my $rest_lines = $lines;
    my @result_lines = ();
    my @attached_files = ();
    my $dirty = undef;
    while (@$rest_lines) {
        my ($new_result_lines, $new_rest_lines, $new_attached_files, $new_dirty) =
            process_macro_lines_rest($rest_lines);
        $rest_lines = $new_rest_lines;
        push(@result_lines, @$new_result_lines);
        push(@attached_files, @$new_attached_files);
        $dirty = 1 if ($new_dirty);
    }
    @result_lines = @{trim_lines(\@result_lines)};
    (\@result_lines, \@attached_files, $dirty);
}

sub process_macro_lines_rest {
    my ($rest_lines) = @_;
    my ($line, @rest_lines) = @$rest_lines;
    my @result_lines = ();
    my @attached_files = ();
    my $dirty = undef;
    if ($line =~ /\A\s*##file\s+(.*)\z/) {
        my ($args, $heredoc_marker) = parse_args($1);
        my $fname = validate_filename($args->[0]);
        my ($attached_files, $rest_lines) = process_macro_include_file(
            $fname, $heredoc_marker, \@rest_lines);
        @attached_files = @$attached_files;
        @rest_lines = @$rest_lines;
        $dirty = 1;
    } elsif ($line =~ /\A\s*##scala\s+(.*)\z/) {
        my ($args, $heredoc_marker) = parse_args($1);
        my $jar_fname = undef;
        my $src_fname = undef;
        my $with_runtime = undef;
        my $wrap_class = undef;
        while (@$args) {
            my $a = shift(@$args);
            if ($a eq '--jar') {
                die "Missing argument of '--jar'\n" unless (@$args);
                $jar_fname = validate_filename(shift(@$args));
            } elsif ($a eq '--wrap') {
                die "Missing argument of '--wrap'\n" unless (@$args);
                $wrap_class = validate_class_name(shift(@$args));
            } elsif ($a eq '--runtime') {
                $with_runtime = 1;
            } elsif (!defined $src_fname) {
                $src_fname = validate_filename($a);
            }
        }
        die "Unexpected EOF marker\n" if (defined($heredoc_marker) && defined($src_fname));
        my ($attached_files, $rest_lines) = process_macro_scala(
            $jar_fname, $wrap_class, $with_runtime, $src_fname, $heredoc_marker, \@rest_lines);
        @attached_files = @$attached_files;
        @rest_lines = @$rest_lines;
        $dirty = 1;
    } else {
        push(@result_lines, $line);
    }
    (\@result_lines, \@rest_lines, \@attached_files, $dirty);
}

sub parse_args {
    my ($arg_str) = @_;
    my @args = ();
    my $is_heredoc = 0;
    my $heredoc_marker = undef;
    while (length($arg_str) > 0) {
        if ($is_heredoc && $arg_str =~ /\A([-_.a-zA-Z0-9][-_.\/a-zA-Z0-9]*)\s*(.*)\z/) {
            $heredoc_marker = validate_heredoc_marker($1);
            $arg_str = $2;
            if (length($arg_str) > 0) {
                die "Cannot parse line: $arg_str\n";
            }
        } elsif ($is_heredoc) {
            die "Cannot parse line: $arg_str\n";
        } elsif ($arg_str =~ /\A([-_.\/a-zA-Z0-9]+)\s*(.*)\z/) {
            push(@args, $1);
            $arg_str = $2;
        } elsif ($arg_str =~ /\A<<(.*)\z/) {
            $is_heredoc = 1;
            $arg_str = $1;
        } else {
            die "Cannot parse line: $arg_str\n";
        }
    }
    (\@args, $heredoc_marker);
}

sub parse_heredoc {
    my ($rest_lines, $heredoc_marker, $ext) = @_;
    my @result_lines = ();
    while (@$rest_lines) {
        my ($line, @rest_lines) = @$rest_lines;
        $rest_lines = \@rest_lines;
        if ($line eq $heredoc_marker) {
            last;
        }
        push(@result_lines, $line);
    }
    (remove_indent(\@result_lines), $rest_lines);
}

sub remove_indent {
    my ($lines) = @_;
    my @result_lines = ();
    my $indent = undef;
    my $len;
    foreach my $line (@$lines) {
        if (defined($indent)) {
            if (substr($line, 0, $len) eq $indent) {
                push(@result_lines, substr($line, $len));
            } else {
                push(@result_lines, $line);
            }
        } else {
            if ($line =~ /\A\s*\z/) {
                push(@result_lines, '');
            } else {
                $line =~ /\A(\s*)(.+)\z/;
                $indent = $1;
                $len = length($indent);
                push(@result_lines, $2);
            }
        }
    }
    \@result_lines;
}

sub process_macro_include_file {
    my ($filename, $heredoc_marker, $rest_lines) = @_;
    my $include_lines;
    if (defined $heredoc_marker) {
        my $ext;
        $ext = $1 if ($filename =~ /\.(.+)\z/);
        ($include_lines, $rest_lines) = parse_heredoc($rest_lines, $heredoc_marker, $ext);
    } else {
        my $filepath = search_include_file($filename);
        die "Not found: $filename\n" unless (defined $filepath);
        open(FP, "<", $filepath) or die "Cannot open $filepath\n";
        $include_lines = [<FP>];
        close(FP);
        $include_lines = remove_end_of_line($include_lines);
    }
    if ($filename =~ /\.sh\z/) {
        my ($body, $attached_files, $dirty) = process_macro_lines($include_lines);
        ([{'name' => $filename, 'body' => $body}, @$attached_files], $rest_lines);
    } else {
        ([{'name' => $filename, 'body' => $include_lines}], $rest_lines);
    }
}

sub process_macro_scala {
    my ($jar_fname, $wrap_class, $with_runtime, $src_fname, $heredoc_marker, $rest_lines) = @_;
    my $result_rest_lines = $rest_lines;

    create_working_dir();

    my $src_path;
    if (defined $heredoc_marker) {
        $src_path = "$working_dir/rt-script.scala";
        my ($include_lines, $new_rest_lines) = parse_heredoc($rest_lines, $heredoc_marker, 'scala');
        $result_rest_lines = $new_rest_lines;
        if (defined($wrap_class)) {
            $include_lines = wrap_scala_class_lines($include_lines, $wrap_class);
        }
        open(FP, ">", $src_path);
        print FP "$_\n" foreach (@$include_lines);
        close(FP);
    } else {
        $src_path = search_include_file($src_fname);
        if (defined($wrap_class)) {
            $src_path = wrap_scala_class_file($src_path, $wrap_class);
        }
    }

    my $src_hash = get_file_hash($src_path);
    my $output_fname;
    if ($with_runtime) {
        $output_fname = "scala-jar-$src_hash.rt.jar";
    } else {
        $output_fname = "scala-jar-$src_hash.jar";
    }
    my $jar_path = "$HOME/.ttr/$output_fname";
    unless ( -e $jar_path) {

        mkdir("$working_dir/rt-classes") if (! -e "$working_dir/rt-classes");

        my $fork_code = "cd $working_dir/rt-classes";
        if ($with_runtime) {
            die "SCALA_HOME Not found" unless ($ENV{'SCALA_HOME'});
            $fork_code = "$fork_code; jar -xf $ENV{SCALA_HOME}/lib/scala-library.jar || exit 1"
        }

        my $pid = fork;
        if ($pid) {
            wait;
        } elsif (defined $pid) {
            exec("$fork_code; scalac $src_path && jar cf $jar_path .");
        } else {
            die;
        }

        if ($? != 0) {
            my $e = $? >> 8;
            if (!$e) {
                $e = 1;
            }
            exit $e;
        }

        `rm -r $working_dir/rt-classes`;

    }

    ([{'name' => $jar_fname, 'output_fname' => $output_fname}], $result_rest_lines);
}

sub wrap_scala_class_lines {
    my ($lines, $class_name) = @_;
    my @result_lines = ();
    push(@result_lines, "object $class_name { def main(args: Array[String]): Unit = {");
    push(@result_lines, @$lines);
    push(@result_lines, "} }");
    \@result_lines;
}

sub wrap_scala_class_file {
    my ($src_path, $class_name) = @_;
    create_working_dir();
    my $new_src_path = "$working_dir/wrap.scala";
    open(FI, '<', $src_path);
    open(FH, '>', $new_src_path);
    print FH "object $class_name { def main(args: Array[String]): Unit = {\n";
    print FH $_ while (<FI>);
    print FH "} }\n";
    close(FH);
    close(FI);
    $new_src_path;
}

sub search_include_file {
    my ($filename) = @_;
    if (-f "$include_path/$filename") {
        "$include_path/$filename";
    } else {
        undef;
    }
}

sub create_working_dir {
    unless (defined $working_dir) {
        my $uid = `id -u`;
        $uid =~ s/\A(.*?)\s*\z/$1/;
        if (-d "/run/user/$uid") {
            $working_dir = tempdir(DIR => "/run/user/$uid", CLEANUP => 1);
        } elsif (-d "/dev/shm") {
            $working_dir = tempdir(DIR => "/dev/shm", CLEANUP => 1);
        } else {
            $working_dir = tempdir(CLEANUP => 1);
        }
        $ENV{'WORKING_DIR'} = $working_dir;
    }
}

sub remove_end_of_line {
    my ($lines) = @_;
    my @result = ();
    foreach my $line (@$lines) {
        $line =~ s/\A(.*?)\n\z/$1/;
        # $line =~ s/\A(.*?)\r\z/$1/;
        push(@result, $line);
    }
    \@result;
}

sub trim_lines {
    my ($lines) = @_;
    my @result_lines = @$lines;
    while () {
        last unless (@result_lines);
        my $l = shift(@result_lines);
        if ($l ne "") {
            unshift(@result_lines, $l);
            last;
        }
    }
    while () {
        last unless (@result_lines);
        my $l = pop(@result_lines);
        if ($l ne "") {
            push(@result_lines, $l);
            last;
        }
    }
    \@result_lines;
}

sub validate_heredoc_marker {
    my ($str) = @_;
    if ($str =~ /\A[_0-9A-Za-z]+\z/) {
        return $str;
    } else {
        die "Invalid heredoc marker: $str";
    }
}

sub validate_filename {
    my ($str) = @_;
    if ($str =~ /\A[-._0-9A-Za-z]+\z/) {
        return $str;
    } else {
        die "Invalid file name: $str";
    }
}

sub validate_class_name {
    my ($str) = @_;
    if ($str =~ /\A[_0-9A-Za-z]+\z/) {
        return $str;
    } else {
        die "Invalid class name: $str";
    }
}

my $build_flag = undef;
my $input_file = "";
my $embedded_mode = undef;
my @script_args = ();
my $script_args_flag = undef;

while () {
    last unless (@ARGV);
    my $arg = shift(@ARGV);
    if ($script_args_flag) {
        push(@script_args, $arg);
    } elsif ($arg eq "--include") {
        if (@ARGV) {
            $include_path = shift(@ARGV);
        }
    } elsif ($arg eq "--build") {
        $build_flag = 1;
    } elsif ($arg eq "--cross") {
        $cross_flag = 1;
    } elsif ($arg eq "-x") {
        $embedded_mode = 1;
    } elsif ($input_file eq "") {
        $input_file = $arg;
    } elsif ($arg eq "--") {
        $script_args_flag = 1;
    } else {
        push(@script_args, $arg);
        $script_args_flag = 1;
    }
}

$input_file = "-" if ($input_file eq "");

my @input_lines;
if ($input_file eq "-") {
    @input_lines = (<STDIN>);
} else {
    open(FH, "<", $input_file);
    @input_lines = (<FH>);
    close(FH);
}
@input_lines = @{remove_end_of_line(\@input_lines)};

if ($embedded_mode) {
    my @new_input_lines = ();
    my $f = 0;
    my $eof_marker = undef;
    foreach my $line (@input_lines) {
        if ($f eq 0) {
            if ($line =~ /\A\s*#!ttr\s*(.*)\z/) {
                my ($args, $heredoc_marker) = parse_args($1);
                if (defined($heredoc_marker)){
                    $eof_marker = $heredoc_marker;
                }
                $f = 1;
            }
        } elsif ($f eq 1) {
            if (defined($eof_marker) && $line =~ ('\A\s*' . quotemeta($eof_marker) . '\s*\z')) {
                last;
            }
            push(@new_input_lines, $line);
        }
    }
    @input_lines = @new_input_lines;
}

my $head_line = shift(@input_lines);
my $shebang_command = undef;
if (defined($head_line)) {
    if ($head_line =~ /\A#!(\/.+)\z/) {
        $shebang_command = $1;
        if ($shebang_command =~ /\A\/[^ ]+sh /) {
            $shebang_command = undef;
        } elsif ($shebang_command =~ /\A\/[^ ]+sh\z/) {
            $shebang_command = undef;
        } else {
            unshift(@input_lines, $head_line);
            $head_line = undef;
        }
    } else {
        unshift(@input_lines, $head_line);
        $head_line = undef;
    }
}

if ($shebang_command) {
    if ($input_file ne "-") {
        my $input_file_escaped = quotemeta($input_file);
        if ($build_flag) {
            exec("cat $input_file_escaped");
        } else {
            if(-x $input_file) {
                exec($input_file_escaped);
            } else {
                exec("$shebang_command $input_file_escaped");
            }
        }
    } else {
        if ($build_flag) {
            print "$_\n" foreach @input_lines;
            exit(0);
        } else {
            create_working_dir();
            my $script_path = "$working_dir/rt-stdin.sh";
            my $script_path_escaped = quotemeta($script_path);
            open(FH, ">", $script_path);
            print FH "$_\n" foreach (@input_lines);
            close(FH);
            exec("$shebang_command $script_path_escaped");
        }
    }
}

my $result = process_main_body(\@input_lines);

if (defined $head_line) {
    unshift(@$result, $head_line);
}

if ($build_flag) {
    print "$_\n" foreach @$result;
} else {
    create_working_dir();
    my $script_name;
    if ($input_file eq "-") {
        $script_name = "stdin.sh";
    } else {
        $script_name = basename($input_file);
    }
    my $script_path = "$working_dir/$script_name";
    open(FH, ">", $script_path);
    print FH "$_\n" foreach (@$result);
    close(FH);
    my $pid = fork;
    if ($pid) {
        wait;
    } elsif (defined $pid) {
        exec("sh", $script_path, @script_args);
    } else {
        die;
    }
    if ($?) {
        my $e = $? >> 8;
        $e = 1 unless ($e);
        exit $e;
    }
}

END_OF_TTR_PL

