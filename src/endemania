#!/bin/sh
exec ttr "$0" -- "$@"

if [ "$#" -eq 0 ]; then
    cat > $WORKING_DIR/input.txt

    if grep -E '(%[0-9a-fA-F][0-9a-fA-F]%[0-9a-fA-F][0-9a-fA-F]|^%[0-9a-fA-F][0-9a-fA-F]$)' $WORKING_DIR/input.txt >/dev/null; then
        env echo -e '\e[34murl-decode\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l url-decode
        exit
    fi

    if :; then
        env echo -e '\e[34mhex-dump\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l hex-dump
    fi

    if :; then
        env echo -e '\e[34mshiftjis-char-encode hex-dump\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l shiftjis-char-encode hex-dump
    fi

    if :; then
        env echo -e '\e[34meuc-jp-char-encode hex-dump\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l euc-jp-char-encode hex-dump
    fi

    if :; then
        env echo -e '\e[34murl-encode\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l url-encode
    fi

    if grep '%[0-9a-fA-F][0-9a-fA-F]' $WORKING_DIR/input.txt >/dev/null; then
        env echo -e '\e[34murl-decode\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l url-decode
    fi

    if :; then
        env echo -e '\e[34mbase64-encode\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l base64-encode
    fi

    if ! grep '[^0-9a-zA-Z+/=\n]' $WORKING_DIR/input.txt >/dev/null; then
        env echo -e '\e[34mbase64-decode\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l base64-decode
    fi

    if :; then
        env echo -e '\e[34municode-escape\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l unicode-escape
    fi

    if grep '\\u' $WORKING_DIR/input.txt >/dev/null; then
        env echo -e '\e[34municode-unescape\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l unicode-unescape
    fi

    if :; then
        env echo -e '\e[34municode-dump\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l unicode-dump
    fi

    if :; then
        env echo -e '\e[34mhex-dump\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l hex-dump
    fi

    if :; then
        env echo -e '\e[34mnfkc (互換合成)\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l nfkc
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l nfkc unicode-dump
        env echo -e '\e[34mnfkd (互換分解)\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l nfkd
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l nfkd unicode-dump
        env echo -e '\e[34mnfc (正規合成)\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l nfc
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l nfc unicode-dump
        env echo -e '\e[34mnfd (正規分解)\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l nfd
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l nfd unicode-dump
    fi

    if :; then
        env echo -e '\e[34mcharname\e[0m'
        cat $WORKING_DIR/input.txt | perl $WORKING_DIR/main.pl -q -l charname
    fi
else
    perl $WORKING_DIR/main.pl "$@"
fi

##file help.txt <<EOF
    Usage: endemania [options] [commands]

    option:
      --help
      -l | --each-line
      -s string
      -q

    command:
      url-encode | urlencode

      url-decode | urldecode

      base64-encode
              Encode into base64 encoding. Encoded string is broken into lines of no
              more than 76 characters each

      base64-long-encode
              Encode into base64 encoding. Encoded string is not broken into lines.

      base64-decode

      unicode-encode | unicode-escape
      unicode-decode | unicode-unescape

      *-char-encode | *-char-encode-perl
      *-char-decode | *-char-decode-perl
      (sjis, cp932, eucjp, iso-2022-jp, iso-8859-1, utf7, utf8, utf16, utf16be, utf16le)

      mb-convert-encoding-*-to-* | mb-convert-encoding-*-to-*-php
      (sjis, sjis-win, sjis-mac, cp932, sjis-2004, eucjp, eucjp-win, eucjp-2004, iso-2022-jp, iso-8859-1, utf7, utf8, utf16, utf-16be, utf-16le)

      utf8-encode
              alias to utf-8-char-encode-perl

      utf8-decode
              alias to utf-8-char-decode-perl

      utf16-encode
              alias to utf-16-be-char-encode-perl

      utf16-decode
              alias to utf-16-be-char-decode-perl

      unicode-dump
      unicode-undump

      hex-dump
      hex-undump

      dec-dump

      bin-dump
      bin-undump

      nfkc
      nfkd
      nfc
      nfd

      charname

      idna-encode-python
      idna-decode-python

      unicode-escape-python
      unicode-unescape-python
      raw-unicode-escape-python
      raw-unicode-unescape-python

      lower-python
      title-python
      upper-python

EOF

##file main.pl <<EOF

    use strict;
    use warnings;
    use utf8;

    use Encode qw/decode encode decode_utf8 encode_utf8/;
    use MIME::Base64 qw/encode_base64 decode_base64/;
    use Unicode::Normalize qw/NFKC NFKD NFC NFD/;

    use IPC::Open2 qw/open2/;

    my $default_encoding = 'utf8';

    my $python_pid = '';

    sub start_python {
        unless ($python_pid) {
            $ENV{"LANG"} = "en_US.UTF-8";
            $python_pid = open2(*PY_READ, *PY_WRITE, "python3 -u $ENV{WORKING_DIR}/sub.py");
        }
    }

    sub end_python {
        if ($python_pid) {
            close(PY_WRITE);
            close(PY_READ);
        }
    }

    sub pipe_python {
        my ($op, $name) = @_;
        start_python();
        (sub {
            my ($line, $is_each_line) = @_;
            $line = encode_utf8($line);
            if ($is_each_line) {
                print PY_WRITE "$op$line\n";
            } else {
                $line = encode_base64($line, '');
                print PY_WRITE "\$$op$line\n";
            }
            my $result = <PY_READ>;
            unless ($is_each_line) {
                $result = decode_base64($result);
            }
            $result = decode_utf8($result);
            $result;
        }, 'str', 'str', $name);
    }

    my $php_pid = '';

    sub start_php {
        unless ($php_pid) {
            $ENV{"LANG"} = "en_US.UTF-8";
            $php_pid = open2(*PHP_READ, *PHP_WRITE, "php $ENV{WORKING_DIR}/sub.php");
        }
    }

    sub end_php {
        if ($php_pid) {
            close(PHP_WRITE);
            close(PHP_READ);
        }
    }

    sub pipe_perl_char_encode {
        my ($charset) = @_;
        (sub {
            my ($line, $is_each_line) = @_;
            my $result = encode($charset, $line);
            $result;
        }, 'str', 'bin', "$charset-char-encode-perl");
    }

    sub pipe_perl_char_decode {
        my ($charset, $is_each_line) = @_;
        (sub {
            my ($line) = @_;
            my $result = decode($charset, $line);
            $result;
        }, 'bin', 'str', "$charset-char-decode-perl");
    }

    sub pipe_php_mb_convert_encoding {
        my ($src, $dst) = @_;
        start_php();
        (sub {
            my ($line, $is_each_line) = @_;
            if ($is_each_line) {
                print PHP_WRITE "mb-convert-encoding $src $dst $line\n";
            } else {
                $line = encode_base64($line, '');
                print PHP_WRITE "mb-convert-encoding-bin $src $dst $line\n";
            }
            my $result = <PHP_READ>;
            unless ($is_each_line) {
                $result = decode_base64($result);
            }
            $result;
        }, 'bin', 'bin', "mb-convert-encoding-$src-to-$dst-php");
    }

    sub pipe_url_encode {
        (sub {
            my ($line, $is_each_line) = @_;
            my $result = $line;
            $result =~ s/([^ 0-9a-zA-Z])/"%".uc(unpack("H2",$1))/eg;
            $result =~ s/ /+/g;
            $result;
        }, 'bin', 'str', "url-encode");
    }

    sub pipe_url_decode {
        (sub {
            my ($line, $is_each_line) = @_;
            my $result = $line;
            $result =~ s/\+/ /g;
            $result =~ s/%([0-9a-fA-F]{2})/pack("H2",$1)/eg;
            $result = encode("iso-8859-1", $result);
            $result;
        }, 'str', 'bin', "url-decode");
    }

    sub pipe_base64_encode {
        (sub {
            my ($line, $is_each_line) = @_;
            my $result;
            if ($is_each_line) {
                $result = encode_base64($line, '');
            } else {
                $result = encode_base64($line);
            }
            $result;
        }, 'bin', 'str', "base64-encode");
    }

    sub pipe_base64_long_encode {
        (sub {
            my ($line, $is_each_line) = @_;
            my $result = encode_base64($line, '');
            $result;
        }, 'bin', 'str', "base64-long-encode");
    }

    sub pipe_base64_decode {
        (sub {
            my ($line, $is_each_line) = @_;
            my $result = decode_base64($line);
            if ($is_each_line) {
                $result =~ s/\n/ /g;
            }
            $result;
        }, 'str', 'bin', "base64-decode");
    }

    sub pipe_unicode_escape {
        my $p1 = sub {
            my ($y) = @_;
            '\\' x (length($y) * 2) . 'u';
        };
        my $p2 = sub {
            my ($ch) = @_;
            my $c = ord($ch);
            if ($c >= 0x20 && $c <= 0x7E) {
                return $ch;
            }
            if ($c >= 0x10000) {
                my $c1 = ($c - 0x10000) / 0x400 + 0xD800;
                my $c2 = ($c - 0x10000) % 0x400 + 0xDC00;
                sprintf("\\u%04x\\u%04x", $c1, $c2);
            } else {
                sprintf("\\u%04x", $c);
            }
        };
        (sub {
            my ($line, $is_each_line) = @_;
            $line =~ s/(\\+)u/$p1->($1)/eg;
            $line =~ s/(.)/$p2->($1)/egs;
            $line;
         }, 'str', 'str', "unicode-escape");
    }

    sub pipe_unicode_unescape {
        my $p1 = sub {
            my ($y, $hex) = @_;
            my $len = length($y);
            if ($len % 2 == 0) {
                return '\\' x ($len / 2) . 'u' . $hex;
            } else {
                return '\\' x (($len - 1) / 2) . chr(hex($hex));
            }
        };
        my $p2 = sub {
            my ($ch1, $ch2) = @_;
            my $c = (ord($ch1) - 0xD800) * 0x400 + (ord($ch2) - 0xDC00) + 0x10000;
            chr($c);
        };
        (sub {
            my ($line, $is_each_line) = @_;
            $line =~ s/(\\+)u+([0-9a-fA-F]{4})/$p1->($1, $2)/eg;
            $line =~ s/([\x{D800}-\x{DBFF}])([\x{DC00}-\x{DFFF}])/$p2->($1, $2)/eg;
            if ($is_each_line) {
                $line =~ s/\n/ /g;
            }
            $line;
         }, 'str', 'str', "unicode-unescape");
    }

    sub pipe_unicode_dump {
        my $p = sub {
            my ($ch) = @_;
            my $c = ord($ch);
            sprintf("%04X ", $c);
        };
        (sub {
            my ($line, $is_each_line) = @_;
            $line =~ s/(.)/$p->($1)/egs;
            $line;
         }, 'str', 'str', "unicode-dump");
    }

    sub pipe_unicode_undump {
        my $p = sub {
            my ($ch) = @_;
            chr(hex($ch));
        };
        (sub {
            my ($line, $is_each_line) = @_;
            $line =~ s/([0-9a-fA-F]{2,5})\s*/$p->($1)/eg;
            if ($is_each_line) {
                $line =~ s/\n/ /g;
            }
            $line;
         }, 'str', 'str', "unicode-undump");
    }

    sub pipe_hex_dump {
        my $p = sub {
            my ($ch) = @_;
            my $c = ord($ch);
            sprintf("%02X ", $c);
        };
        (sub {
            my ($line, $is_each_line) = @_;
            $line =~ s/(.)/$p->($1)/egs;
            $line;
         }, 'bin', 'str', "hex-dump");
    }

    sub pipe_hex_undump {
        my $p = sub {
            my ($ch) = @_;
            pack("H2", $ch);
        };
        (sub {
            my ($line, $is_each_line) = @_;
            $line =~ s/([0-9a-fA-F]{2})\s*/$p->($1)/eg;
            $line = encode("iso-8859-1", $line);
            if ($is_each_line) {
                $line =~ s/\n/ /g;
            }
            $line;
         }, 'str', 'bin', "hex-undump");
    }

    sub pipe_dec_dump {
        my $p = sub {
            my ($ch) = @_;
            my $c = ord($ch);
            sprintf("%d ", $c);
        };
        (sub {
            my ($line, $is_each_line) = @_;
            $line =~ s/(.)/$p->($1)/egs;
            $line;
         }, 'bin', 'str', "dec-dump");
    }

    sub pipe_bin_dump {
        my $p = sub {
            my ($ch) = @_;
            my $c = ord($ch);
            sprintf("%08B ", $c);
        };
        (sub {
            my ($line, $is_each_line) = @_;
            $line =~ s/(.)/$p->($1)/egs;
            $line;
         }, 'bin', 'str', "bin-dump");
    }

    sub pipe_bin_undump {
        my $p = sub {
            my ($ch) = @_;
            pack("B8", $ch);
        };
        (sub {
            my ($line, $is_each_line) = @_;
            $line =~ s/([01]{8})\s*/$p->($1)/eg;
            $line = encode("iso-8859-1", $line);
            if ($is_each_line) {
                $line =~ s/\n/ /g;
            }
            $line;
         }, 'str', 'bin', "bin-undump");
    }

    sub pipe_nfkc {
        (sub {
            my ($line, $is_each_line) = @_;
            NFKC($line);
         }, 'str', 'str', "nfkc");
    }

    sub pipe_nfkd {
        (sub {
            my ($line, $is_each_line) = @_;
            NFKD($line);
         }, 'str', 'str', "nfkd");
    }

    sub pipe_nfc {
        (sub {
            my ($line, $is_each_line) = @_;
            NFC($line);
         }, 'str', 'str', "nfc");
    }

    sub pipe_nfd {
        (sub {
            my ($line, $is_each_line) = @_;
            NFD($line);
         }, 'str', 'str', "nfd");
    }

    sub pipe_charname {
        pipe_python("n", "charname");
    }

    sub pipe_python_idna_encode {
        pipe_python("d", "idna-encode-python");
    }

    sub pipe_python_idna_decode {
        pipe_python("D", "idna-decode-python");
    }

    sub pipe_python_unicode_escape {
        pipe_python("s", "unicode-escape-python");
    }

    sub pipe_python_unicode_unescape {
        pipe_python("S", "unicode-unescape-python");
    }

    sub pipe_python_raw_unicode_escape {
        pipe_python("r", "raw-unicode-escape-python");
    }

    sub pipe_python_raw_unicode_unescape {
        pipe_python("R", "raw-unicode-unescape-python");
    }

    sub pipe_python_lower {
        pipe_python("l", "lower-python");
    }

    sub pipe_python_title {
        pipe_python("t", "title-python");
    }

    sub pipe_python_upper {
        pipe_python("u", "upper-python");
    }

    my $is_help = '';
    my $is_each_line = 1;
    my $is_verbose = 1;
    my @pipesInfo = ();
    my @lines = ();

    while () {
        last if (@ARGV == 0);
        my $a = shift;
        my @pipeInfo = ();
        if ($a eq '-s') {
            last if (@ARGV == 0);
            my $b = shift;
            push(@lines, $b);
        } elsif ($a eq '--help') {
            $is_help = 1;
        } elsif ($a eq '--each-line') {
            $is_each_line = 1;
        } elsif ($a eq '-l') {
            $is_each_line = 1;
        } elsif ($a eq '-m') {
            $is_each_line = '';
        } elsif ($a eq '-q') {
            $is_verbose = '';

        } elsif ($a eq 'url-encode' || $a eq 'urlencode') {
            @pipeInfo = pipe_url_encode;
        } elsif ($a eq 'url-decode' || $a eq 'urldecode') {
            @pipeInfo = pipe_url_decode;

        } elsif ($a eq 'base64-encode') {
            @pipeInfo = pipe_base64_encode;
        } elsif ($a eq 'base64-long-encode') {
            @pipeInfo = pipe_base64_long_encode;
        } elsif ($a eq 'base64-decode') {
            @pipeInfo = pipe_base64_decode;

        } elsif ($a eq 'unicode-encode' || $a eq 'unicode-escape') {
            @pipeInfo = pipe_unicode_escape();
        } elsif ($a eq 'unicode-decode' || $a eq 'unicode-unescape') {
            @pipeInfo = pipe_unicode_unescape();

        } elsif ($a =~ /\A(.+)-char-encode\Z/) {
            @pipeInfo = pipe_perl_char_encode($1);
        } elsif ($a =~ /\A(.+)-char-decode\Z/) {
            @pipeInfo = pipe_perl_char_decode($1);

        } elsif ($a =~ /\A(.+)-char-encode-perl\Z/) {
            @pipeInfo = pipe_perl_char_encode($1);
        } elsif ($a =~ /\A(.+)-char-decode-perl\Z/) {
            @pipeInfo = pipe_perl_char_decode($1);

        } elsif ($a =~ /\Amb-convert-encoding-(.+)-to-(.+)\Z/) {
            @pipeInfo = pipe_php_mb_convert_encoding($1, $2);
        } elsif ($a =~ /\Amb-convert-encoding-(.+)-to-(.+)-php\Z/) {
            @pipeInfo = pipe_php_mb_convert_encoding($1, $2);

        } elsif ($a eq 'utf8-encode') {
            @pipeInfo = pipe_perl_char_encode('utf8');
        } elsif ($a eq 'utf8-decode') {
            @pipeInfo = pipe_perl_char_decode('utf8');

        } elsif ($a eq 'utf16-encode') {
            @pipeInfo = pipe_perl_char_encode('utf16be');
        } elsif ($a eq 'utf16-decode') {
            @pipeInfo = pipe_perl_char_decode('utf16be');

        } elsif ($a eq 'unicode-dump') {
            @pipeInfo = pipe_unicode_dump();
        } elsif ($a eq 'unicode-undump') {
            @pipeInfo = pipe_unicode_undump();

        } elsif ($a eq 'hex-dump') {
            @pipeInfo = pipe_hex_dump();
        } elsif ($a eq 'hex-undump') {
            @pipeInfo = pipe_hex_undump();
        } elsif ($a eq 'dec-dump') {
            @pipeInfo = pipe_dec_dump();

        } elsif ($a eq 'bin-dump') {
            @pipeInfo = pipe_bin_dump();
        } elsif ($a eq 'bin-undump') {
            @pipeInfo = pipe_bin_undump();

        } elsif ($a eq 'nfkc') {
            @pipeInfo = pipe_nfkc();
        } elsif ($a eq 'nfkd') {
            @pipeInfo = pipe_nfkd();
        } elsif ($a eq 'nfc') {
            @pipeInfo = pipe_nfc();
        } elsif ($a eq 'nfd') {
            @pipeInfo = pipe_nfd();

        } elsif ($a eq 'charname') {
            @pipeInfo = pipe_charname();

        } elsif ($a eq 'idna-encode') {
            @pipeInfo = pipe_python_idna_encode();
        } elsif ($a eq 'idna-decode') {
            @pipeInfo = pipe_python_idna_decode();
        } elsif ($a eq 'idna-encode-python') {
            @pipeInfo = pipe_python_idna_encode();
        } elsif ($a eq 'idna-decode-python') {
            @pipeInfo = pipe_python_idna_decode();

        } elsif ($a eq 'unicode-escape-python') {
            @pipeInfo = pipe_python_unicode_escape();
        } elsif ($a eq 'unicode-unescape-python') {
            @pipeInfo = pipe_python_unicode_unescape();
        } elsif ($a eq 'raw-unicode-escape-python') {
            @pipeInfo = pipe_python_raw_unicode_escape();
        } elsif ($a eq 'raw-unicode-unescape-python') {
            @pipeInfo = pipe_python_raw_unicode_unescape();

        } elsif ($a eq 'lower-python') {
            @pipeInfo = pipe_python_lower();
        } elsif ($a eq 'title-python') {
            @pipeInfo = pipe_python_title();
        } elsif ($a eq 'upper-python') {
            @pipeInfo = pipe_python_upper();

        } else {
            die "Illegal command: $a\n";
        }
        if (@pipeInfo) {
            push(@pipesInfo, \@pipeInfo);
        }
    }

    sub help {
        open(IN, '<', $ENV{'WORKING_DIR'} . '/help.txt') or die "Cannot open";
        print while <IN>;
        close IN;
    }

    if ($is_help) {
        help();
        exit;
    }

    sub createPipes {
        print "\x1b[34mBIN" if ($is_verbose);
        my @pipes = ();
        my $prev_type = 'bin';
        foreach my $p (@pipesInfo) {
            my ($pipe, $in_type, $out_type, $name) = @$p;
            if ($prev_type eq 'bin' && $in_type eq 'str') {
                my ($p) = pipe_perl_char_decode($default_encoding);
                push(@pipes, $p);
                print " =[$default_encoding-char-decode]=> STR" if ($is_verbose);
            } elsif ($prev_type eq 'str' && $in_type eq 'bin') {
                my ($p) = pipe_perl_char_encode($default_encoding);
                push(@pipes, $p);
                print " =[$default_encoding-char-encode]=> BIN" if ($is_verbose);
            }
            $prev_type = $out_type;
            push(@pipes, $pipe);
            if ($is_verbose) {
                print " =[$name]=> ";
                if ($prev_type eq 'str') {
                    print "STR";
                } elsif ($prev_type eq 'bin') {
                    print "BIN";
                }
            }
        }
        if ($prev_type eq 'str') {
            my ($p) = pipe_perl_char_encode($default_encoding);
            push(@pipes, $p);
            print " =[$default_encoding-char-encode]=> BIN" if ($is_verbose);
        }
        print "\x1b[0m\n" if ($is_verbose);
        @pipes;
    }

    my @pipes = createPipes();

    if (@lines) {
        foreach my $line (@lines) {
            foreach my $p (@pipes) {
                $line = $p->($line);
            }
            print $line;
            print "\n";
        }
    } elsif ($is_each_line) {
        while (my $line = <STDIN>) {
            #my $exists_lf = '';
            my $exists_lf = 1;
            my $exists_lf2 = '';
            if ($line =~ /\A(.*)\n\Z/) {
                $line = $1;
                $exists_lf = 1;
            }
            foreach my $p (@pipes) {
                $line = $p->($line, $is_each_line);
            }
            if ($line =~ /\A(.*)\n\Z/) {
                $exists_lf2 = 1;
            }
            print $line;
            if ($exists_lf && !$exists_lf2) {
                print "\n";
            }
        }
    } else {
        my @lines = <STDIN>;
        my $line = join('', @lines);
        $line = $line;
        foreach my $p (@pipes) {
            $line = $p->($line, $is_each_line);
        }
        print $line;
    }

    end_python();
    end_php();

EOF

##file sub.py <<EOF

    import sys
    import unicodedata
    import base64

    for line in sys.stdin:
        op = line[0]
        if op == '$':
            is_each_line = False
            op = line[1]
            line = base64.decodestring(line[2:-1].encode("ascii")).decode("utf-8")
        else:
            is_each_line = True
            line = line[1:-1]
        try:
            if op == 'n':
                result = ""
                for ch in line:
                    try:
                        result = result + "{" + ("%04X" % ord(ch)) + "/" + unicodedata.name(ch) + "}"
                    except:
                        result = result + "{" + ("%04X" % ord(ch)) + "}"
            elif op == 'd':
                result = line.encode("idna").decode("utf-8")
            elif op == 'D':
                result = line.encode("utf-8").decode("idna")
            elif op == 's':
                result = line.encode("unicode_escape").decode("utf-8")
            elif op == 'S':
                result = line.encode("utf-8").decode("unicode_escape")
            elif op == 'r':
                result = line.encode("raw_unicode_escape").decode("utf-8")
            elif op == 'R':
                result = line.encode("utf-8").decode("raw_unicode_escape")
            elif op == 'l':
                result = line.lower()
            elif op == 't':
                result = line.title()
            elif op == 'u':
                result = line.upper()
            else:
                result = "ERROR"
        except:
            raise
            #pass
        if is_each_line:
            sys.stdout.write(result)
        else:
            sys.stdout.write(base64.encodestring(result.encode("utf-8")).decode("ascii").replace("\n", ""))
        sys.stdout.write("\n")

EOF

##file sub.php <<EOF
    <?php

    $stdin = fopen('php://stdin', 'r');

    while (!feof($stdin)) {
        $line = trim(fgets($stdin));
        if (preg_match('/^mb-convert-encoding ([^ ]+) ([^ ]+) (.*)$/', $line, $matches)) {
            echo mb_convert_encoding($matches[3], $matches[2], $matches[1]);
        } else if (preg_match('/^mb-convert-encoding-bin ([^ ]+) ([^ ]+) (.*)$/', $line, $matches)) {
            echo base64_encode(mb_convert_encoding(base64_decode($matches[3]), $matches[2], $matches[1]));
        } else {
            echo "ERROR";
        }
        echo "\n";
    }

EOF

