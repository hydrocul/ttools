#!/usr/bin/perl

use strict;
use warnings;

my @htmlSingleElements = qw/area base br button embed hr img input link meta object param wbr/;

my $delimiter = '/';

sub trim {
    my ($str) = @_;
    $str =~ s/^\s*(.*?)\s*$/$1/;
    $str;
}

sub decode_html {
    my ($str) = @_;
    $str =~ s/&gt;/>/g;
    $str =~ s/&lt;/</g;
    $str =~ s/&amp;/&/g;
    $str =~ s/&quot;/"/g;
    $str =~ s/&apos;/'"/g;
    $str;
}

sub print_attr {
    my ($h2, $line) = @_;
    $line = trim($line);
    while (length($line) > 0) {
        if ($line =~ /\A([-_a-zA-Z0-9]+)="(.*?)"(.*)\z/) {
            my $name = $1;
            my $value = trim(decode_html($2));
            $line = $3;
            print "$delimiter$h2$delimiter\@$name\t$value\n";
        } else {
            $line = "";
        }
        $line = trim($line);
    }
}

my $first = 1;
my @labels = ();

sub process_partial {
    my ($line, $is_last) = @_;

    my $h;
    if (@labels) {
        $h = $labels[0];
    } else {
        $h = ["", "", 0];
    }

    $line =~ s/\A[ \t\r\n]*(.*)\z/$1/s;

    if ($first) {
        if ($line =~ /\A<\?xml.*?>(.*)\z/is) {
            $line = $1;
            @htmlSingleElements = ();
            $first = undef;
            return ($line, undef);
        } elsif ($line =~ /\A<!DOCTYPE.*?>(.*)\z/is) {
            $line = $1;
            $first = undef;
            return ($line, undef);
        } elsif ($line =~ /\A<[^>]*\z/s) {
            return ($line, 1);
        }
    }

    $first = undef;

    if ($line =~ /\A</) {
        if ($line =~ /\A<!--(.*?)-->(.*)\z/s) {
            my @text = split(/\n/, $1);
            $line = $2;
            foreach my $text (@text) {
                $text = trim($text);
                if (length($text) > 0) {
                     print "$delimiter$h->[1]${delimiter}comment()\t$text\n";
                     $h->[2] = 1;
                }
            }
            return ($line, undef);
        } elsif ($line =~ /\A<([^ \t\r\n\/>]+)([^>]*?)\/[ \t\r\n]*>(.*)\z/s && $h->[0] ne 'script') { # 単独の要素
            my $name = lc($1);
            my $attr_str = $2;
            $line = $3;
            print_attr("$h->[1]$delimiter$name", $attr_str);
            print "$delimiter$h->[1]$delimiter$name\t\n";
            return ($line, undef);
        } elsif ($line =~ /\A<([^ \t\r\n\/>]+)(.*?)>(.*)\z/s && $h->[0] ne 'script') { # 開きタグ
            my $name = lc($1);
            my $attr_str = $2;
            $line = $3;
            $h->[2] = 1;
            print_attr("$h->[1]$delimiter$name", $attr_str);
            if (grep {$_ eq $name} @htmlSingleElements) {
                print "$delimiter$h->[1]$delimiter$name\t\n";
            } else {
                unshift(@labels, [$name, "$h->[1]$delimiter$name"]);
            }
            return ($line, undef);
        } elsif ($line =~ /\A<\/([^ \t\r\n\/>]+).*?>(.*)\z/s) { # 閉じタグ
            my $name = lc($1);
            if ($name eq $h->[0]) {
                $line = $2;
                unless ($h->[2]) {
                    print "$delimiter$h->[1]\t\n";
                }
                shift(@labels);
                return ($line, undef);
            }
        } elsif ($line =~ /\A<[^>]*\z/s) {
            return ($line, 1);
        }
    }

    if ($line =~ /\A(.+?)(<.*)\z/s) {
        my @text = split(/\n/, decode_html($1));
        $line = $2;
        foreach my $text (@text) {
            $text = trim($text);
            if (length($text) > 0) {
                print "$delimiter$h->[1]${delimiter}text()\t$text\n";
                $h->[2] = 1;
            }
        }
        return ($line, undef);
    } elsif ($line =~ /\A(.+?)(\n.*)\z/s) {
        my $text = trim(decode_html($1));
        $line = $2;
        if (length($text) > 0) {
            print "$delimiter$h->[1]${delimiter}text()\t$text\n";
            $h->[2] = 1;
        }
        return ($line, undef);
    } elsif ($is_last) {
        my $text = trim(decode_html($line));
        $line = '';
        if (length($text) > 0) {
            print "$delimiter$h->[1]${delimiter}text()\t$text\n";
            $h->[2] = 1;
        }
        return ($line, undef);
    }

    return ($line, 1);
}

foreach (@ARGV) {
    if ($_ =~ /\A-p(.)/) {
        $delimiter = $1;
    } else {
        die "Unknwon argument: $_\n";
    }
}

my $line = '';
while () {
    my $len = read STDIN, my $buf, 1024;
    die unless (defined($len));
    if ($len == 0) {
        while () {
            my $need_tail;
            ($line, $need_tail) = process_partial($line, 1);
            exit if (length($line) == 0);
            die if ($need_tail);
        }
    }
    $line = $line . $buf;
    while () {
        my $need_tail;
        ($line, $need_tail) = process_partial($line, undef);
        last if ($need_tail);
    }
}




