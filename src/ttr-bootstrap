#!/bin/sh
if [ -z "$WORKING_DIR" ]; then
    if [ -z "$UID" ]; then
        UID=`id -u`
    fi
    if [ -d /run/user/$UID ]; then
        export WORKING_DIR=`mktemp -d -p /run/user/$UID`
    elif [ -d /dev/shm ]; then
        export WORKING_DIR=`mktemp -d -p /dev/shm`
    else
        export WORKING_DIR=`mktemp -d`
    fi
else
    export WORKING_DIR=$WORKING_DIR/working-$$
    mkdir $WORKING_DIR
fi
export HARD_WORKING_DIR=
export PERM_WORKING_DIR=
trap ":" 2 3 15
(

################################################################################
# ttr.pl
mkdir -p $HOME/.ttr
if [ -e $HOME/.ttr/file-3b8ac2c66b3c5ae7d4ec30c134f9d379 ]; then
    touch $HOME/.ttr/file-3b8ac2c66b3c5ae7d4ec30c134f9d379
else
cat <<\EOF_3b8ac2c66b3c5ae7d4ec30c134f9d379 > $HOME/.ttr/file-3b8ac2c66b3c5ae7d4ec30c134f9d379
use strict;
use warnings;
use utf8;

use File::Temp qw/tempfile tempdir/;
use File::Basename qw/dirname basename/;
use File::Path qw/rmtree/;
use Digest::MD5 qw/md5_hex/;
use IPC::Open2 qw/open2/;

use Data::Dumper;

my $separator = "################################################################################";

my $HOME = $ENV{'HOME'};

my $include_path = ".";
my $script_dir_path = undef;
my $cross_flag = undef;

my $needs_working_dir = undef;
my $needs_working_dir_hard = undef;
my $needs_working_dir_perm = undef;

my $working_dir = undef;

my $global_attached_files = [];
# グローバル
# (name), output_fname, (alias), hash, (body), (binary_path), (for_subttr), (copy_flag)
# ttrごとに
# (name), output_fname, (copy_flag)

my $global_hash = undef;

my $global_shebang_line = undef;

sub assemble_files {
    my ($main_body, $attached_files, $subttr_flag) = @_;
    my @result_lines = ();
    foreach my $file (@$attached_files) {
        push(@result_lines, $separator) unless ($subttr_flag);
        push(@result_lines, @{create_heredoc_sh($file, $subttr_flag)});
        push(@result_lines, "");
    }
    push(@result_lines, $separator) unless ($subttr_flag);
    push(@result_lines, @$main_body);
    if (@$attached_files || $needs_working_dir || $needs_working_dir_hard) {
        @result_lines = @{wrap_working_dir(\@result_lines,
                                           ($needs_working_dir || (scalar @$attached_files)),
                                           $needs_working_dir_hard,
                                           $needs_working_dir_perm,
                                           $cross_flag, $subttr_flag)};
    }
    \@result_lines;
}

sub create_heredoc_sh {
    my ($attached_file, $subttr_flag) = @_;
    my @result_lines = ();
    my $filename = $attached_file->{'name'};
    if (defined($filename)) {
        push(@result_lines, "# $filename");
    } else {
        push(@result_lines, "# $attached_file->{output_fname}");
    }
    if (defined($filename)) {
        my $dirname = dirname($filename);
        if ($dirname ne '.') {
            push(@result_lines, "mkdir -p \$WORKING_DIR/$dirname");
        }
    }
    my $output_fname = $attached_file->{'output_fname'};
    my $hash = $attached_file->{'hash'};
    my $for_subttr = $attached_file->{'for_subttr'};
    unless ($subttr_flag) {
        push(@result_lines, "mkdir -p \$HOME/.ttr");
        push(@result_lines, "if [ -e \$HOME/.ttr/$output_fname ]; then");
        push(@result_lines, "    touch \$HOME/.ttr/$output_fname");
        push(@result_lines, "else");
        if ($attached_file->{'body'}) {
            my $lines = $attached_file->{'body'};
            push(@result_lines, "cat <<\\EOF_$hash > \$HOME/.ttr/$output_fname");
            push(@result_lines, @$lines);
            push(@result_lines, "EOF_$hash");
        } elsif ($attached_file->{'binary_path'}) {
            my $path = $attached_file->{'binary_path'};
            push(@result_lines, "base64 -d <<EOF_$hash > \$HOME/.ttr/$output_fname");
            open(FP, "-|", "cat $path | base64");
            my @lines = (<FP>);
            close(FP);
            push(@result_lines, @{remove_end_of_line(\@lines)});
            push(@result_lines, "EOF_$hash");
        } else {
            my $path = "$HOME/.ttr/$output_fname";
            push(@result_lines, "base64 -d <<EOF_$hash > \$HOME/.ttr/$output_fname");
            open(FP, "-|", "cat $path | base64");
            my @lines = (<FP>);
            close(FP);
            push(@result_lines, @{remove_end_of_line(\@lines)});
            push(@result_lines, "EOF_$hash");
        }
        push(@result_lines, "fi");
        if ($attached_file->{'alias'}) {
            my $alias = $attached_file->{'alias'};
            push(@result_lines, "if [ -e \$HOME/.ttr/$alias ]; then");
            push(@result_lines, "    touch \$HOME/.ttr/$alias");
            push(@result_lines, "else");
            push(@result_lines, "    ln -s \$HOME/.ttr/$output_fname \$HOME/.ttr/$alias");
            push(@result_lines, "fi");
        }
    }
    if ($for_subttr && !$subttr_flag) {
        # nop
    } elsif (!defined($filename)) {
        # nop
    } elsif ($attached_file->{'copy_flag'}) {
        push(@result_lines, "cp \$HOME/.ttr/$output_fname \$WORKING_DIR/$filename");
    } else {
        push(@result_lines, "ln -f -s \$HOME/.ttr/$output_fname \$WORKING_DIR/$filename");
    }
    \@result_lines;
}

sub get_lines_hash {
    my ($lines) = @_;
    my $body = join("\n", @$lines) . "\n";
    my $hash = md5_hex($body);
    $hash;
}

sub get_file_hash {
    my ($path) = @_;
    substr(`cat $path | md5sum`, 0, 32);
}

sub wrap_working_dir {
    my ($lines, $needs_working_dir, $needs_working_dir_hard, $needs_working_dir_perm, $cross_flag, $subttr_flag) = @_;
    if (defined($needs_working_dir_perm) && $needs_working_dir_perm eq '-') {
        $needs_working_dir_perm = $global_hash;
    }
    my @first_lines = ();
    my @last_lines = ();
    if ($needs_working_dir) {
        if ($subttr_flag) {
            push(@first_lines, "export WORKING_DIR=\$WORKING_DIR/working-\$\$");
            push(@first_lines, "mkdir \$WORKING_DIR");
        } elsif ($cross_flag) {
            # TODO uidを取得できない場合の安全対策
            push(@first_lines, "if [ -z \"\$WORKING_DIR\" ]; then");
            push(@first_lines, "    if [ -z \"\$UID\" ]; then");
            push(@first_lines, "        UID=\`id -u\`");
            push(@first_lines, "    fi");
            push(@first_lines, "    if [ -d /run/user/\$UID ]; then");
            push(@first_lines, "        export WORKING_DIR=\`mktemp -d -p /run/user/\$UID\`");
            push(@first_lines, "    elif [ -d /dev/shm ]; then");
            push(@first_lines, "        export WORKING_DIR=\`mktemp -d -p /dev/shm\`");
            push(@first_lines, "    else");
            push(@first_lines, "        export WORKING_DIR=\`mktemp -d\`");
            push(@first_lines, "    fi");
            push(@first_lines, "else");
            push(@first_lines, "    export WORKING_DIR=\$WORKING_DIR/working-\$\$");
            push(@first_lines, "    mkdir \$WORKING_DIR");
            push(@first_lines, "fi");
        } else {
            my $uid = `id -u`;
            $uid =~ s/\A(.*?)\s*\z/$1/ if (defined($uid));
            push(@first_lines, "if [ -z \"\$WORKING_DIR\" ]; then");
            if (defined($uid) && -d "/run/user/$uid") {
                push(@first_lines, "    export WORKING_DIR=\`mktemp -d -p /run/user/$uid\`");
            } elsif (-d "/dev/shm") {
                push(@first_lines, "    export WORKING_DIR=\`mktemp -d -p /dev/shm\`");
            } else {
                push(@first_lines, "    export WORKING_DIR=\`mktemp -d\`");
            }
            push(@first_lines, "else");
            push(@first_lines, "    export WORKING_DIR=\$WORKING_DIR/working-\$\$");
            push(@first_lines, "    mkdir \$WORKING_DIR");
            push(@first_lines, "fi");
        }
    }
    if ($needs_working_dir_hard) {
        push(@first_lines, "export HARD_WORKING_DIR=\`mktemp -d\`");
    } else {
        push(@first_lines, "export HARD_WORKING_DIR=");
    }
    if ($needs_working_dir_perm) {
        push(@first_lines, "export PERM_WORKING_DIR=\$HOME/.ttr/perm-$needs_working_dir_perm");
        push(@first_lines, "mkdir -p \$PERM_WORKING_DIR");
        push(@first_lines, "touch \$PERM_WORKING_DIR");
    } else {
        push(@first_lines, "export PERM_WORKING_DIR=");
    }
    push(@first_lines, 'trap ":" 2 3 15');
    push(@first_lines, "(");
    push(@last_lines, $separator) unless ($subttr_flag);
    push(@last_lines, ")");
    push(@last_lines, "RET=\$?");
    if ($needs_working_dir_hard) {
        push(@last_lines, "rm -rf \$HARD_WORKING_DIR 2>/dev/null");
    }
    if ($needs_working_dir) {
        push(@last_lines, "rm -rf \$WORKING_DIR 2>/dev/null");
    }
    push(@last_lines, "exit \$RET");
    [@first_lines, "", @$lines, "", @last_lines];
}

sub process_macro_lines {
    my ($lines, $for_subttr) = @_;
    my $rest_lines = $lines;
    my @result_lines = ();
    my @attached_files = ();
    my $dirty = undef;
    while (@$rest_lines) {
        my ($new_result_lines, $new_rest_lines, $new_attached_files, $new_dirty) =
            process_macro_lines_rest($rest_lines, $for_subttr);
        $rest_lines = $new_rest_lines;
        push(@result_lines, @$new_result_lines);
        push(@attached_files, @$new_attached_files);
        $dirty = 1 if ($new_dirty);
    }
    @result_lines = @{trim_lines(\@result_lines)};
    (\@result_lines, \@attached_files, $dirty);
}

sub process_macro_lines_rest {
    my ($rest_lines, $for_subttr) = @_;
    my ($line, @rest_lines) = @$rest_lines;
    my @result_lines = ();
    my @attached_files = ();
    my $dirty = undef;
    if ($line =~ /\A\s*##working-dir()\z/ || $line =~ /\A\s*##working-dir\s+(.*)\z/) {
        my ($args, $heredoc_marker) = parse_args($1);
        my $hard_flag = undef;
        my $perm_name = undef;
        while (@$args) {
            my $a = shift(@$args);
            if ($a eq '--hard') {
                $hard_flag = 1;
            } elsif ($a eq '--perm') {
                die "Missing argument of '--perm'\n" unless (@$args);
                $perm_name = shift(@$args);
            }
        }
        $needs_working_dir = 1;
        $needs_working_dir_hard = 1 if ($hard_flag);
        $needs_working_dir_perm = $perm_name;
        $dirty = 1;
    } elsif ($line =~ /\A\s*##file\z/) {
        die "Missing argument of \`##file\`\n";
    } elsif ($line =~ /\A\s*##file\s+(.*)\z/) {
        my ($args, $heredoc_marker) = parse_args($1);
        my $fname = undef;
        my $copy_flag = undef;
        my $ttr_flag = undef;
        my $preexec_flag = undef;
        my $prebuild_flag = undef;
        my $scala_flag = undef;
        while (@$args) {
            my $a = shift(@$args);
            if ($a eq '--copy') {
                $copy_flag = 1;
            } elsif ($a eq '--ttr') {
                $ttr_flag = 1;
            } elsif ($a eq '--preexec') {
                $preexec_flag = 1;
            } elsif ($a eq '--prebuild') {
                $prebuild_flag = 1;
            } elsif ($a eq '--scala') {
                $scala_flag = 1;
            } elsif (!defined $fname) {
                $fname = validate_filename($a);
            }
            # TODO --binary
        }
        die "Missing argument of \`##file\`\n" if (!defined($fname));
        my ($attached_files, $rest_lines) = process_macro_include_file(
            $fname, $copy_flag, $ttr_flag, $preexec_flag, $prebuild_flag, $scala_flag, $heredoc_marker, \@rest_lines, $for_subttr);
        @attached_files = @$attached_files;
        @rest_lines = @$rest_lines;
        $dirty = 1;
    } elsif ($line =~ /\A\s*##scala\z/) {
        die "Missing argument of \`##scala\`\n";
    } elsif ($line =~ /\A\s*##scala\s+(.*)\z/) {
        my ($args, $heredoc_marker) = parse_args($1);
        my $jar_fname = undef;
        my $src_fname = undef;
        my $with_runtime = undef;
        my $wrap_class = undef;
        while (@$args) {
            my $a = shift(@$args);
            if ($a eq '--jar') {
                die "Missing argument of '--jar'\n" unless (@$args);
                $jar_fname = validate_filename(shift(@$args));
            } elsif ($a eq '--wrap') {
                die "Missing argument of '--wrap'\n" unless (@$args);
                $wrap_class = validate_class_name(shift(@$args));
            } elsif ($a eq '--runtime') {
                $with_runtime = 1;
            } elsif (!defined $src_fname) {
                $src_fname = validate_filename($a);
            }
        }
        die "Unexpected EOF marker\n" if (defined($heredoc_marker) && defined($src_fname));
        my ($attached_files, $rest_lines) = process_macro_scala(
            $jar_fname, $wrap_class, $with_runtime, $src_fname, $heredoc_marker, \@rest_lines, $for_subttr);
        @attached_files = @$attached_files;
        @rest_lines = @$rest_lines;
        $dirty = 1;
    } elsif ($line =~ /\A#-/) {
        push(@result_lines, '');
    } else {
        push(@result_lines, $line);
    }
    if ($for_subttr) {
        my @new_attached_files = ();
        foreach my $a (@attached_files) {
            $a->{'for_subttr'} = 1;
            push(@new_attached_files, $a);
        }
        @attached_files = @new_attached_files;
    }
    (\@result_lines, \@rest_lines, \@attached_files, $dirty);
}

sub parse_args {
    my ($arg_str) = @_;
    my @args = ();
    my $is_heredoc = 0;
    my $heredoc_marker = undef;
    while (length($arg_str) > 0) {
        if ($is_heredoc && $arg_str =~ /\A([-_.a-zA-Z0-9][-_.\/a-zA-Z0-9]*)\s*(.*)\z/) {
            $heredoc_marker = validate_heredoc_marker($1);
            $arg_str = $2;
            if (length($arg_str) > 0) {
                die "Cannot parse line: $arg_str\n";
            }
        } elsif ($is_heredoc) {
            die "Cannot parse line: $arg_str\n";
        } elsif ($arg_str =~ /\A([-_.\/a-zA-Z0-9]+)\s*(.*)\z/) {
            push(@args, $1);
            $arg_str = $2;
        } elsif ($arg_str =~ /\A<<(.*)\z/) {
            $is_heredoc = 1;
            $arg_str = $1;
        } else {
            die "Cannot parse line: $arg_str\n";
        }
    }
    (\@args, $heredoc_marker);
}

sub parse_args_for_embedded_mode {
    my ($arg_str) = @_;
    my @args = ();
    while (length($arg_str) > 0) {
        if ($arg_str =~ /\A(\S+)\s*(.*)\z/) {
            push(@args, $1);
            $arg_str = $2;
        } else {
            die "Cannot parse line: $arg_str\n";
        }
    }
    \@args;
}

sub parse_heredoc {
    my ($rest_lines, $heredoc_marker, $ext) = @_;
    my @result_lines = ();
    while (@$rest_lines) {
        my ($line, @rest_lines) = @$rest_lines;
        $rest_lines = \@rest_lines;
        if ($line eq $heredoc_marker) {
            last;
        }
        push(@result_lines, $line);
    }
    (remove_indent(\@result_lines), $rest_lines);
}

sub remove_indent {
    my ($lines) = @_;
    my @result_lines = ();
    my $indent = undef;
    my $len;
    foreach my $line (@$lines) {
        if (defined($indent)) {
            if (substr($line, 0, $len) eq $indent) {
                push(@result_lines, substr($line, $len));
            } else {
                push(@result_lines, $line);
            }
        } else {
            if ($line =~ /\A\s*\z/) {
                push(@result_lines, '');
            } else {
                $line =~ /\A(\s*)(.+)\z/;
                $indent = $1;
                $len = length($indent);
                push(@result_lines, $2);
            }
        }
    }
    \@result_lines;
}

sub process_macro_include_file {
    my ($filename, $copy_flag, $ttr_flag, $preexec_flag, $prebuild_flag, $scala_flag, $heredoc_marker, $rest_lines, $for_subttr) = @_;
    my $include_lines;
    my $already = undef;
    if (defined $heredoc_marker) {
        my $ext;
        $ext = $1 if ($filename =~ /\.(.+)\z/);
        ($include_lines, $rest_lines) = parse_heredoc($rest_lines, $heredoc_marker, $ext);
    } else {
        $already = get_attached_file_from_global($filename);
        unless (defined($already)) {
            my $filepath = search_include_file($filename);
            die "Not found: $filename\n" unless (defined $filepath);
            # TODO 加工の必要がないファイルはメモリに読み込まないように
            open(FP, "<", $filepath) or die "Cannot open $filepath\n";
            $include_lines = [<FP>];
            close(FP);
            $include_lines = remove_end_of_line($include_lines);
        }
    }
    if ($already) {
        ([{'name' => $filename,
           'output_fname' => $already,
           'copy_flag' => $copy_flag}],
         $rest_lines);
    } else {
        if ($preexec_flag) {
            $include_lines = process_macro_include_file_preexec($include_lines);
        } elsif ($prebuild_flag) {
            $include_lines = process_macro_include_file_prebuild($include_lines);
        } elsif ($scala_flag) {
            $include_lines = scala_translate($include_lines);
        }
        my $global_copy_flag = $copy_flag && !$for_subttr;
        my $hash = get_lines_hash($include_lines);
        my $output_fname;
        if ($ttr_flag) {
            $output_fname = "script-$hash";
        } else {
            $output_fname = "file-$hash";
        }
        my $c = scalar @$global_attached_files;
        $global_attached_files = [@$global_attached_files,
            {'name' => $filename,
             'output_fname' => $output_fname,
             'hash' => $hash,
             'body' => $include_lines,
             'for_subttr' => $for_subttr,
             'copy_flag' => $global_copy_flag}];
        if ($ttr_flag && !$preexec_flag && !$prebuild_flag && !$scala_flag) {
            $include_lines = process_lines_for_subttr($include_lines);
            $global_attached_files->[$c]->{'body'} = $include_lines;
        }
        ([{'name' => $filename,
           'output_fname' => $output_fname,
           'copy_flag' => $copy_flag}],
         $rest_lines);
    }
}

sub process_macro_include_file_preexec {
    my ($include_lines) = @_;
    _process_macro_include_file_preexec_sub($include_lines, undef);
}

sub process_macro_include_file_prebuild {
    my ($include_lines) = @_;
    _process_macro_include_file_preexec_sub($include_lines, 1);
}

sub _process_macro_include_file_preexec_sub {
    my ($include_lines, $build_only) = @_;
    my $reader;
    my $writer;
    my $command;
    if ($build_only) {
        if ($cross_flag) {
            $command = "ttr --build --cross";
        } else {
            $command = "ttr --build";
        }
    } else {
        $command = "ttr";
    }
    my $pid = open2($reader, $writer, $command);
    unless ($pid) {
        die "failed to exec ttr\n";
    }
    print $writer "$_\n" foreach (@$include_lines);
    close($writer);
    @$include_lines = <$reader>;
    wait;
    remove_end_of_line($include_lines);
}

sub get_attached_file_from_global {
    my ($filename) = @_;
    foreach my $attached_file (@$global_attached_files) {
        if ($attached_file->{'name'} eq $filename) {
            return $attached_file->{'output_fname'};
        }
    }
    undef;
}

sub process_macro_scala {
    my ($jar_fname, $wrap_class, $with_runtime, $src_fname, $heredoc_marker, $rest_lines, $for_subttr) = @_;
    my $result_rest_lines = $rest_lines;

    create_working_dir();

    my $src_path;
    my $src_hash;
    if (defined $heredoc_marker) {
        $src_path = "$working_dir/script.scala";
        my ($include_lines, $new_rest_lines) = parse_heredoc($rest_lines, $heredoc_marker, 'scala');
        $result_rest_lines = $new_rest_lines;
        if (defined($wrap_class)) {
            $include_lines = wrap_scala_class_lines($include_lines, $wrap_class);
        }
        open(FP, ">", $src_path);
        print FP "$_\n" foreach (@$include_lines);
        close(FP);
        $src_hash = get_lines_hash($include_lines);
    } else {
        $src_path = search_include_file($src_fname);
        if (defined($wrap_class)) {
            $src_path = wrap_scala_class_file($src_path, $wrap_class);
        }
        $src_hash = get_file_hash($src_path);
    }

    my $result = process_macro_scala_sub($jar_fname, $with_runtime, $src_path, $src_hash, $for_subttr);
    ($result, $result_rest_lines);
}

sub process_macro_scala_sub {
    my ($jar_fname, $with_runtime, $src_path, $src_hash, $for_subttr) = @_;

    my $output_fname;
    if ($with_runtime) {
        $output_fname = "scala-jar-$src_hash.rt.jar";
    } else {
        $output_fname = "scala-jar-$src_hash.jar";
    }
    my $jar_path = "$HOME/.ttr/$output_fname";
    if ( -e $jar_path && !$ENV{'TTR_TEST'}) {
        `touch $jar_path`;
    } else {
        process_macro_scala_compile($jar_path, $src_path, $with_runtime);
    }

    my $hash = get_file_hash($jar_path);
    $global_attached_files = [@$global_attached_files,
        {'name' => $jar_fname,
         'output_fname' => $output_fname,
         'hash' => $hash,
         'for_subttr' => $for_subttr}];
    [{'name' => $jar_fname,
      'output_fname' => $output_fname}];
}

sub process_macro_scala_compile {
    my ($jar_path, $src_path, $with_runtime) = @_;

    if (-e "$working_dir/classes") {
        rmtree("$working_dir/classes");
    }
    mkdir("$working_dir/classes");

    my $fork_code = ":";
    if ($with_runtime) {
        die "SCALA_HOME Not found" unless ($ENV{'SCALA_HOME'});
        $fork_code = "$fork_code; (cd $working_dir/classes; jar -xf $ENV{SCALA_HOME}/lib/scala-library.jar) || exit 1"
    }

    $fork_code = "$fork_code; scalac -d $working_dir/classes $src_path || exit 1";
    if ($ENV{'TTR_TEST'}) {
        # タイムスタンプが違うとjarのバイナリが異なってしまい、
        # テストしづらいので、
        # テストの場合はタイムスタンプを強制的に設定する。
        $fork_code = "$fork_code; find $working_dir/classes | xargs touch -t 1310290000.00";
    }
    fork_and_wait("$fork_code; jar -cMf $jar_path -C $working_dir/classes .");

    rmtree("$working_dir/classes");
}

sub wrap_scala_class_lines {
    my ($lines, $class_name) = @_;
    my @result_lines = ();
    push(@result_lines, "object $class_name { def main(args: Array[String]): Unit = {");
    push(@result_lines, @$lines);
    push(@result_lines, "} }");
    \@result_lines;
}

sub wrap_scala_class_file {
    my ($src_path, $class_name) = @_;
    create_working_dir();
    my $new_src_path = "$working_dir/wrap.scala";
    open(FI, '<', $src_path);
    open(FH, '>', $new_src_path);
    print FH "object $class_name { def main(args: Array[String]): Unit = {\n";
    print FH $_ while (<FI>);
    print FH "} }\n";
    close(FH);
    close(FI);
    $new_src_path;
}

sub search_include_file {
    my ($filename) = @_;
    if (-f "$include_path/$filename") {
        "$include_path/$filename";
    } elsif (defined($script_dir_path) && -f "$script_dir_path/$filename") {
        "$script_dir_path/$filename";
    } else {
        undef;
    }
}

sub create_working_dir {
    unless (defined $working_dir) {
        my $uid = `id -u`;
        $uid =~ s/\A(.*?)\s*\z/$1/;
        if (-d "/run/user/$uid") {
            $working_dir = tempdir(DIR => "/run/user/$uid", CLEANUP => 1);
        } elsif (-d "/dev/shm") {
            $working_dir = tempdir(DIR => "/dev/shm", CLEANUP => 1);
        } else {
            $working_dir = tempdir(CLEANUP => 1);
        }
        $ENV{'WORKING_DIR'} = $working_dir;
    }
}

sub remove_end_of_line {
    my ($lines) = @_;
    my @result = ();
    foreach my $line (@$lines) {
        $line =~ s/\A(.*?)\n\z/$1/;
        # $line =~ s/\A(.*?)\r\z/$1/;
        push(@result, $line);
    }
    \@result;
}

sub trim_lines {
    my ($lines) = @_;
    my @result_lines = @$lines;
    while () {
        last unless (@result_lines);
        my $l = shift(@result_lines);
        if ($l ne "") {
            unshift(@result_lines, $l);
            last;
        }
    }
    while () {
        last unless (@result_lines);
        my $l = pop(@result_lines);
        if ($l ne "") {
            push(@result_lines, $l);
            last;
        }
    }
    \@result_lines;
}

sub validate_heredoc_marker {
    my ($str) = @_;
    if ($str =~ /\A[_0-9A-Za-z]+\z/) {
        return $str;
    } else {
        die "Invalid heredoc marker: $str";
    }
}

sub validate_filename {
    my ($str) = @_;
    if ($str =~ /\A[-._0-9A-Za-z]+\z/) {
        return $str;
    } else {
        die "Invalid file name: $str";
    }
}

sub validate_class_name {
    my ($str) = @_;
    if ($str =~ /\A[_0-9A-Za-z]+\z/) {
        return $str;
    } else {
        die "Invalid class name: $str";
    }
}

sub fork_and_wait {
    my @args = @_;
    my $pid = fork;
    if ($pid) {
        wait;
    } elsif (defined $pid) {
        exec(@args);
    } else {
        die;
    }

    if ($? != 0) {
        my $e = $? >> 8;
        $e = 1 unless ($e);
        exit $e;
    }
}

my $build_flag = undef;
my $input_file = "";
my $thru_flag = undef;
my @script_args = ();
my $script_args_flag = undef;

while () {
    last unless (@ARGV);
    my $arg = shift(@ARGV);
    if ($script_args_flag) {
        push(@script_args, $arg);
    } elsif ($arg eq "--include") {
        if (@ARGV) {
            $include_path = shift(@ARGV);
        }
    } elsif ($arg eq "--build") {
        $build_flag = 1;
    } elsif ($arg eq "--cross") {
        $cross_flag = 1;
    } elsif ($arg eq "-x") {
        # ignore
    } elsif ($arg eq "--sh") {
        # ignore
    } elsif ($arg eq "--thru") {
        $thru_flag = 1;
    } elsif ($input_file eq "") {
        $input_file = $arg;
    } elsif ($arg eq "--") {
        $script_args_flag = 1;
    } else {
        push(@script_args, $arg);
        $script_args_flag = 1;
    }
}

$input_file = "-" if ($input_file eq "");

if ($input_file ne "-") {
    $script_dir_path = dirname($input_file);
}

my @input_lines;
if ($input_file eq "-") {
    @input_lines = (<STDIN>);
} else {
    open(FH, "<", $input_file) or die "Cannot open input file: $input_file\n";
    @input_lines = (<FH>);
    close(FH);
}
@input_lines = @{remove_end_of_line(\@input_lines)};

sub process_lines {
    my ($input_lines, $input_file, $build_flag) = @_;
    _process_lines_impl($input_lines, undef, $input_file, $build_flag, []);
}

sub process_lines_for_subttr {
    my ($input_lines, $already_attached) = @_;
    _process_lines_impl($input_lines, 1, undef, undef);
}

sub _process_lines_impl {
    my ($input_lines, $for_subttr, $input_file, $build_flag) = @_;
    my $shebang_line;
    my $shebang_command;

    my $old_stack = _process_lines_push_stack();

    ($input_lines, $shebang_line, $shebang_command) = preprocess_lines($input_lines, ($thru_flag && !$for_subttr));
    if ($shebang_command) {
        die if ($for_subttr);
        exec_shebang_command($input_file, $input_lines, $shebang_command, $build_flag);
        die;
    }
    if ($for_subttr) {
        unless ($shebang_line) {
           $shebang_line = $global_shebang_line;
        }
    } else {
        if ($shebang_line) {
           $global_shebang_line = $shebang_line;
        }
    }
    my ($main_body, $attached_files, $dirty) = process_macro_lines($input_lines, $for_subttr);
    my $result;
    if (!$dirty) {
        $result = $input_lines;
    } elsif ($for_subttr) {
        $result = assemble_files($main_body, $attached_files, $for_subttr);
    } else {
        $result = assemble_files($main_body, $global_attached_files, $for_subttr);
    }
    if ($shebang_line) {
        unshift(@$result, $shebang_line);
    }

    _process_lines_pop_stack($old_stack);

    $result;
}

sub _process_lines_push_stack {
    my $current_needs_working_dir = $needs_working_dir;
    my $current_needs_working_dir_hard = $needs_working_dir_hard;
    my $current_needs_working_dir_perm = $needs_working_dir_perm;
    $needs_working_dir = undef;
    $needs_working_dir_hard = undef;
    $needs_working_dir_perm = undef;
    [$current_needs_working_dir, $current_needs_working_dir_hard, $current_needs_working_dir_perm];
}

sub _process_lines_pop_stack {
    my ($new_val) = @_;
    ($needs_working_dir, $needs_working_dir_hard, $needs_working_dir_perm) = @$new_val;
}

sub preprocess_lines {
    my ($input_lines, $thru_flag) = @_;
    my @input_lines = @$input_lines;
    my $shebang_command;
    my $shebang_line;
    if (@input_lines > 0 && $input_lines[0] =~ /\A#!\//) {
        $shebang_line = shift(@input_lines);
        $shebang_command = get_shebang_line_command($shebang_line);
        if ($shebang_command) {
            unshift(@input_lines, $shebang_line);
            $shebang_line = undef;
            unless ($thru_flag) {
                @input_lines = @{preprocess_lines_wrap_sh(\@input_lines, $shebang_command)};
                $shebang_command = undef;
            }
        }
    }
    $input_lines = preprocess_lines_parse_embedded(\@input_lines);
    ($input_lines, $shebang_line, $shebang_command)
}

sub preprocess_lines_parse_embedded {
    my ($input_lines) = @_;
    if (@$input_lines > 0 && $input_lines->[0] =~ /\Aexec\s+ttr\s+(.+)\z/) {
        # 行頭が exec の場合
        #my $embedded_args = parse_args_for_embedded_mode($1);
        my @new_input_lines = @$input_lines;
        shift(@new_input_lines);
        $input_lines = \@new_input_lines;
    } elsif (@$input_lines > 1 && $input_lines-[0] =~ /\A#!\// && $input_lines->[1] =~ /\Aexec\s+ttr\s+(.+)\z/) {
        # 2行目頭が exec の場合
        #my $embedded_args = parse_args_for_embedded_mode($1);
        my @new_input_lines = @$input_lines;
        shift(@new_input_lines);
        shift(@new_input_lines);
        $input_lines = \@new_input_lines;
    }
    preprocess_lines_parse_embedded_sub($input_lines);
}

# `#!ttr` を探す
sub preprocess_lines_parse_embedded_sub {
    my ($input_lines) = @_;
    my @new_input_lines = ();
    my $f = 0;
    my $eof_marker = undef;
    foreach my $line (@$input_lines) {
        if ($f eq 0) {
            if ($line =~ /\A\s*#!ttr\s*(.*)\z/) {
                my ($args, $heredoc_marker) = parse_args($1);
                if (defined($heredoc_marker)){
                    $eof_marker = $heredoc_marker;
                }
                @new_input_lines = ();
                $f = 1;
            } else {
                push(@new_input_lines, $line);
            }
        } elsif ($f eq 1) {
            if (defined($eof_marker) && $line =~ ('\A\s*' . quotemeta($eof_marker) . '\s*\z')) {
                last;
            }
            push(@new_input_lines, $line);
        }
    }
    \@new_input_lines;
}

sub get_shebang_line_command {
    my ($shebang_line) = @_;
    if ($shebang_line =~      /\A#!\/[^ ]+sh /) {
        undef;
    } elsif ($shebang_line =~ /\A#!\/[^ ]+sh\z/) {
        undef;
    } elsif ($shebang_line =~ /\A#!(\/.+)\z/) {
        $1;
    } else {
        die $shebang_line;
    }
}

sub preprocess_lines_wrap_sh {
    my ($input_lines, $shebang_command) = @_;
    my @input_lines = ();
    my $hash = get_lines_hash($input_lines);
    push(@input_lines, "$shebang_command \$WORKING_DIR/main");
    push(@input_lines, "##file main <<EOF_$hash");
    push(@input_lines, @$input_lines);
    push(@input_lines, "EOF_$hash");
    \@input_lines;
}

sub exec_shebang_command {
    my ($input_file, $input_lines, $shebang_command, $build_flag) = @_;
    if ($input_file ne "-") {
        my $input_file_escaped = quotemeta($input_file);
        if ($build_flag) {
            exec("cat $input_file_escaped");
        } else {
            if(-x $input_file) {
                exec($input_file_escaped);
            } else {
                exec("$shebang_command $input_file_escaped");
            }
        }
    } else {
        if ($build_flag) {
            print "$_\n" foreach @input_lines;
            exit(0);
        } else {
            create_working_dir();
            my $script_path = "$working_dir/rt-stdin.sh";
            my $script_path_escaped = quotemeta($script_path);
            open(FH, ">", $script_path);
            print FH "$_\n" foreach (@input_lines);
            close(FH);
            exec("$shebang_command $script_path_escaped");
            # TODO 一時ディレクトリの削除が必要
        }
    }
}

$global_hash = get_lines_hash(\@input_lines);
my $result = process_lines(\@input_lines, $input_file, $build_flag);

if ($build_flag) {
    print "$_\n" foreach @$result;
} else {
    create_working_dir();
    my $script_name;
    if ($input_file eq "-") {
        $script_name = "stdin.sh";
    } else {
        $script_name = basename($input_file);
    }
    my $script_path = "$working_dir/$script_name";
    open(FH, ">", $script_path);
    print FH "$_\n" foreach (@$result);
    close(FH);
    fork_and_wait("sh", $script_path, @script_args);
}

sub scala_translate {
    my ($input_lines) = @_;
    my $shell_command;
    my $runtime_flag;
    my $wrap_class_name;
    my @build_sbt_lines = ();
    my @scala_source_lines = ();
    my $build_sbt_flag;
    foreach (@$input_lines) {
        if ($build_sbt_flag) {
            if (/\A\s*\/\/\s*##\s*end\s+of\s+build\.sbt/) {
                $build_sbt_flag = undef;
                push(@scala_source_lines, "");
            } else {
                push(@build_sbt_lines, $_);
            }
        } else {
            if (/\A\s*\/\/\s*##\s*build.sbt/) {
                $build_sbt_flag = 1;
                push(@scala_source_lines, "");
            } elsif (/\A\s*\/\/\s*##\s*-c\s+(.+)\z/) {
                $shell_command = $1;
                if ($shell_command eq "java" || $shell_command =~ /\Ajava\s+/) {
                    $runtime_flag = 1;
                }
                push(@scala_source_lines, "");
            } elsif (/\A\s*\/\/\s*##\s*java\s*\z/) {
                $shell_command = "java";
                $runtime_flag = 1;
                push(@scala_source_lines, "");
            } elsif (/\A\s*\/\/\s*##\s*java\s+(.+)\z/) {
                $shell_command = "java $1";
                $runtime_flag = 1;
                push(@scala_source_lines, "");
            } elsif (/\A\s*\/\/\s*##\s*scala\s*\z/) {
                $shell_command = "scala";
                push(@scala_source_lines, "");
            } elsif (/\A\s*\/\/\s*##\s*scala\s+(.+)\z/) {
                $shell_command = "scala $1";
                push(@scala_source_lines, "");
            } elsif (/\A\s*\/\/\s*##\s*wrap\s+(\S+)/) {
                $wrap_class_name = $1;
                #push(@scala_source_lines, "");
            } else {
                push(@scala_source_lines, $_);
            }
        }
    }
    if ($wrap_class_name) {
        unshift(@scala_source_lines, "object $wrap_class_name { def main(args: Array[String]): Unit = {");
        push(@scala_source_lines, "} }");
    }
    if (!defined($shell_command)) {
        $shell_command = "scala";
    }
    if (defined($wrap_class_name)) {
        if ($shell_command eq "java") {
            $shell_command = "java $wrap_class_name \"\$@\"";
        } elsif ($shell_command eq "scala") {
            $shell_command = "scala $wrap_class_name \"\$@\"";
        }
    }

    create_working_dir();

    my $src_hash = get_lines_hash(\@scala_source_lines);

    my $jar_ln_output_fname = "scala-jar-$src_hash.jar";

    my $classpath = "\$HOME\/.ttr\/$jar_ln_output_fname";
    if ($runtime_flag) {
        die "SCALA_HOME Not found" unless ($ENV{'SCALA_HOME'});
        my $runtime_hash = get_file_hash("$ENV{SCALA_HOME}/lib/scala-library.jar");
        if ( ! -e "$HOME/.ttr/file-$runtime_hash") {
            fork_and_wait("ln $ENV{SCALA_HOME}/lib/scala-library.jar \$HOME/.ttr/file-$runtime_hash");
        }
        $global_attached_files = [@$global_attached_files,
            {'output_fname' => "file-$runtime_hash",
             'alias' => "file-$runtime_hash.jar",
             'hash' => $runtime_hash,
             'for_subttr' => 1}];
        $classpath = "$classpath:\$HOME/.ttr/file-$runtime_hash.jar";
    }
    $shell_command =~ s/\A(java|scala)\s+/$1 -cp $classpath /g;

    my $jar_hash;
    my $jar_output_fname;

    if (-e "$HOME/.ttr/$jar_ln_output_fname" && -l "$HOME/.ttr/$jar_ln_output_fname" && !$ENV{'TTR_TEST'}) {
        $jar_output_fname = basename(readlink("$HOME/.ttr/$jar_ln_output_fname"));
        unless ($jar_output_fname =~ /\Afile-(.+)\z/) {
            die;
        }
        $jar_hash = $1;
    } else {

        my $src_path = "$working_dir/script.scala";
        my $jar_path = "$working_dir/script.jar";

        open(FP, ">", $src_path);
        print FP "$_\n" foreach (@scala_source_lines);
        close(FP);

        if (-e "$working_dir/classes") {
            rmtree("$working_dir/classes");
        }
        mkdir("$working_dir/classes");

        my $fork_code = "scalac -d $working_dir/classes $src_path || exit 1";
        if ($ENV{'TTR_TEST'}) {
            # タイムスタンプが違うとjarのバイナリが異なってしまい、
            # テストしづらいので、
            # テストの場合はタイムスタンプを強制的に設定する。
            $fork_code = "$fork_code; find $working_dir/classes | xargs touch -t 1310290000.00";
        }
        fork_and_wait("$fork_code; jar -cMf $jar_path -C $working_dir/classes .");

        rmtree("$working_dir/classes");

        $jar_hash = get_file_hash($jar_path);
        $jar_output_fname = "file-$jar_hash";
        fork_and_wait("mv $jar_path \$HOME/.ttr/$jar_output_fname");

    }

    my @new_input_lines = ();
    push(@new_input_lines, $shell_command);

    $global_attached_files = [@$global_attached_files,
        {'output_fname' => $jar_output_fname,
         'alias' => $jar_ln_output_fname,
         'hash' => $jar_hash,
         'for_subttr' => 1}];

    \@new_input_lines;
}

EOF_3b8ac2c66b3c5ae7d4ec30c134f9d379
fi
ln -f -s $HOME/.ttr/file-3b8ac2c66b3c5ae7d4ec30c134f9d379 $WORKING_DIR/ttr.pl

################################################################################
# 
# ##working-dir
# 
# ##file example.rb
# 
# ##file example.txt <<end
# ...
# ##end
# 
# ##java --jar example.jar example.java
# 
# ##java --jar example.jar <<end
# ...
# ##end
# 
# ##scala --jar example.jar example.scala
# 
# ##scala --jar example.jar <<end
# 
# ##end
# 

perl $WORKING_DIR/ttr.pl "$@"

################################################################################
)
RET=$?
rm -rf $WORKING_DIR 2>/dev/null
exit $RET
